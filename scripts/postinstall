#!/usr/bin/env bash

#
# postinstall.sh
#
# Copyright (C) 2018 - 2019 James Joseph Balamuta <balamut2@illinois.edu>
# 
# Version 3.2.0 -- 2019-12-03
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#


# The headless CLI install given in this file is 
# licensed under the MIT license by Timothy Sutton 2013 - 2014
# The unmodified code can be found at:
# https://github.com/timsutton/osx-vm-templates/blob/ce8df8a7468faa7c5312444ece1b977c1b2f77a4/scripts/xcode-cli-tools.sh#L8-L14

# Retrieve version string x.y.z,
# x should be 10, y is the version, and z is the patch issued
product_version=$(sw_vers -productVersion)

# Substitute periods with spaces
os_vers=( ${product_version//./ } )

#  Retrieve 
os_vers_minor="${os_vers[1]}"

# For more details on manipulations, c.f. 
# https://superuser.com/a/1259034/429046

echo "[init] Verifying Xcode CLI is installed..."

# Check if the Xcode CLI tool directory exists.
# See technical note: https://developer.apple.com/library/content/technotes/tn2339/_index.html#//apple_ref/doc/uid/DTS40014588-CH1-WHAT_IS_THE_COMMAND_LINE_TOOLS_PACKAGE_
# Note: This is not a rigorous check... So, if a user has deleted contents
# inside the folder but left the folder intact, then this will _not_ trigger
# an installation

if [ ! -d "/Library/Developer/CommandLineTools" ]; then

    echo "[setup] Begin install procedure for Xcode CLI..."

	# Create a temporary file for the header
	touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # Reset the Xcode CLI path
	if [[ ${os_vers_minor} -ge 14 ]]; then
        echo "[note] Needed to reset Xcode CLI path..."
		sudo xcode-select --reset 
	fi
    
    echo "[note] Retrieving correct Xcode CLI..."
    
	# Figure out the correct Xcode CLI for the given mac OS
    PROD=""
	if [[ ${os_vers_minor} -ge 15 ]]; then
        echo "[note] Retrieving Xcode CLI on Catalina (10.15) or higher OS..."
    	PROD=$(sudo softwareupdate -l |
    		grep "\*.*Command Line" |
    		head -n 1 | awk -F"*" '{print $2}' |
    		sed -e 's/^ * Label: //' |
    		tr -d '\n')
    else
        echo "[note] Retrieving Xcode CLI on Mojave (10.14) or lower OS..."
    	PROD=$(sudo softwareupdate -l |
    		grep "\*.*Command Line" |
    		tail -n 1 | awk -F"*" '{print $2}' |
    		sed -e 's/^ *//' |
    		tr -d '\n')
	fi

    echo "[setup] Installing Xcode CLI via softwareupdate..."
	# Install Xcode CLI		 
	sudo softwareupdate -i "$PROD" --verbose;
	
    echo "[clean] Removing temporary file created..."
    # Clean up the script
	rm -rf /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    echo "[done] Xcode CLI has been installed..."
else
    echo "[done] Xcode CLI is already installed..."
fi

################################################################

#1 Base URL (with trailing /)
#2 File name
download_file(){
	if [ -f "$2" ]; then
		echo "[note] $2 has already been downloaded..."
	else 
		echo "[status] Downloading file $2 ... Please be patient..."	
		# Download file into working directory
		curl -O $1$2
	fi
}

#1 File name
extract_file(){
	# Extract in working directory
	tar fvxz $1 -C /
}

################################################################

#1 Path to File
#2 md5 Hash to Check Against
check_md5_hash() {
	
    # Obtain file hash
    FILE_HASH=$(md5 $1 | awk '{print $4}')
    
    # MD5 (path/to/file.pkg) = c29700c4e7b2914073ef7e741eb105bc
    #  1 %         2        %3%      4 
     
    # Check against hash
    if [ "$FILE_HASH" = "$2" ]; then
       echo 0
    else 
	   echo "[error] File does not match hash..."
	   echo "[status] Hash 1: ${FILE_HASH} $2"
	   echo "[status] Hash 2: $2"
       exit 1
    fi
}

# 1: Package to install 
install_pkg_root() {
	sudo installer -package $1 -target /
}

################################################################

# The following script are meant to modify the Makevars file
# for R

#1 Variable to find/remove
#2 Config file to search
remove_config_variable(){

	pattern=$1
	config_file=$2

	# Check if there are matches
	if grep -q $pattern $config_file; then
		# Remove matches
		# '' required due to macOS
		sed -i '' "/$pattern/d" $config_file
		echo "[status] Removed configuration line containing: $pattern ..."
	fi
}

#1 Variable to find
#2 Value to append
#3 Config file to search
append_config_variable(){
	pattern=$1
	append_with=$2
	config_file=$3

	# Check if there are matches
	if grep -q $pattern $config_file; then
		# Append to the end of the line of each match
		# '' required due to macOS
		sed -i '' "\~$pattern~s~$~ $append_with~" $config_file
		echo "[status] Appended configuration line containing $pattern with $append_with ..."
	else
		# Append a new line to end of config file
		echo "$pattern=$append_with" >> $config_file
		echo "[status] Added new configuration line $pattern=$append_with to end of $config_file..."
	fi
}

add_config_variable(){
	config_var=$1
	config_file=$2

	echo "[status] Adding configuration line $config_var to $config_file ..."

	# Append a new line to end of config file
	echo "$config_var" >> $config_file
}

################################################################

echo "[init] Downloading the clang7 compiler package ..."

# Provide download information for clang4 binary
LIBS_URL="https://cran.r-project.org/bin/macosx/tools/"
REQUESTED_FILE="clang-7.0.0.pkg"

# Download file into working directory
download_file $LIBS_URL $REQUESTED_FILE

echo "[verify] Verifying the hash of clang7 compiler package ..."

# Check the hash matches the built-in hash
# exit if this is not the case
check_md5_hash $REQUESTED_FILE "cef3fd2a5c165d00f9941f64ea4024f7"

echo "[setup] Installing the clang7 compiler package ..."

# Install the package into root
install_pkg_root $REQUESTED_FILE

echo "[clean] Removing installer package ..."
# Clean up by removing tar
rm -rf $REQUESTED_FILE

echo "[done] Finished installing the compiler ..."

################################################################

echo "[init] Creating environment variables ..."

# Local User Makevars file
R_MAKEVARS_LOCAL=~/.R/Makevars

# clang compiler version
CLANG_BINARY=clang7

# Location of CC Compiler
CC_COMPILER=/usr/local/${CLANG_BINARY}/bin/clang

# Location of CXX Compiler
CXX_COMPILER=/usr/local/${CLANG_BINARY}/bin/clang++

HEADER_LOCATION="-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"

echo "[init] Checking if file '~/.R/Makevars' exists"
if [ -f "${R_MAKEVARS_LOCAL}" ]; then	
	echo "[setup] Ensuring the existing '~/.R/Makevars' is writable ..."
	sudo chown ${USER} ${R_MAKEVARS_LOCAL}
	echo "[setup] '~/.R/Makevars' detected. Making a backup at ''~/.R/Makevars.bck' ..."
	cp ${R_MAKEVARS_LOCAL} ${R_MAKEVARS_LOCAL}.bck
else
	echo "[setup] Creating '~/.R/' directory ..."
	mkdir -p ~/.R
fi

echo "[init] Creating '~/.R/Makevars' from scratch ..."

# Create the file
touch ${R_MAKEVARS_LOCAL}

echo "[setup] Filling '~/.R/Makevars' with appropriate compile time implicit variables ..."
# Fill with appropriate linking statements via heredoc insertion
# The - removes tabbing
cat <<- EOF > ${R_MAKEVARS_LOCAL}
# clang: start
CFLAGS=$HEADER_LOCATION
CCFLAGS=$HEADER_LOCATION
CXXFLAGS=$HEADER_LOCATION
CPPFLAGS=$HEADER_LOCATION -I/usr/local/include

SHLIB_CXXLDFLAGS+=-Wl,-rpath,\${R_HOME}/lib \${R_HOME}/lib/libc++abi.1.dylib
# clang: end
EOF

echo "[done] Installed '~/.R/Makevars' configuration ..."

##########################################

# Add clang to path in .Renviron

# Establish the location for the R environment file
R_ENVIRON_LOCAL=~/.Renviron

echo "[init] Checking if file '~/.Renviron' exists"

if [ -f "${R_ENVIRON_LOCAL}" ]; then
	echo "[setup] Ensuring the existing '~/.Renviron' is writable ..."
	sudo chown ${USER} ${R_ENVIRON_LOCAL}
	echo "[setup] '~/.Renviron' detected. Making a backup at ''~/.Renviron.bck'..."
	cp ${R_ENVIRON_LOCAL} ${R_ENVIRON_LOCAL}.bck
fi

echo "[setup] Writing configuration to '~/.Renviron' ..."

cat <<- EOF > ${R_ENVIRON_LOCAL}
# clang: start
PATH="/usr/local/${CLANG_BINARY}/bin:\${PATH}"
# clang: end
EOF

echo "[done] Installed '~/.Renviron' file ..."

##########################################


# gfortran binary
echo "[init] Downloading the gfortran6.1 package ..."

# Deploy only the 6.1 gfortran binary
GFORTRAN_HASH="201026216e8b373d9cd2efc0cc474bb8"

# Download software

# Provide download information for clang4 binary
LIBS_URL="https://cran.r-project.org/bin/macosx/tools/"
REQUESTED_FILE="gfortran-6.1.pkg"

# Download file into working directory
download_file $LIBS_URL $REQUESTED_FILE

echo "[verify] Verifying the hash of gfortran6.1 package ..."

# Check the hash matches the built-in hash
# exit if this is not the case
check_md5_hash $REQUESTED_FILE $GFORTRAN_HASH

echo "[setup] Installing the gfortran6.1 package ..."

# Install the package into root
install_pkg_root $REQUESTED_FILE

echo "[clean] Removing installer package ..."
# Delete the dmg file
rm -rf ${GFORTRAN_DMG}.dmg

echo "[done] Installed gfortran package ..."

