#!/usr/bin/env bash

#
# postinstall.sh
#
# Copyright (C) 2018 - 2020 James Joseph Balamuta <balamut2@illinois.edu>
# 
# Version 4.0.0 -- 2020-04-28
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#


# The headless CLI install given in this file is 
# licensed under the MIT license by Timothy Sutton 2013 - 2014
# The unmodified code can be found at:
# https://github.com/timsutton/osx-vm-templates/blob/ce8df8a7468faa7c5312444ece1b977c1b2f77a4/scripts/xcode-cli-tools.sh#L8-L14

macos_minor_version() {
    # Retrieve version string x.y.z,
    # x should be 10, y is the version, and z is the patch issued
    product_version=$(sw_vers -productVersion)
    
    # Retrieve minor version of OS.
    # Note: We make an assumption about the installer state preventing older uses.
    echo $product_version | cut -d '.' -f 2
}

# For more details on manipulations, c.f. 
# https://superuser.com/a/1259034/429046

echo "[init] Verifying Xcode CLI is installed..."

# Check if the Xcode CLI tool directory exists.
# See technical note: https://developer.apple.com/library/content/technotes/tn2339/_index.html#//apple_ref/doc/uid/DTS40014588-CH1-WHAT_IS_THE_COMMAND_LINE_TOOLS_PACKAGE_
# Note: This is not a rigorous check... So, if a user has deleted contents
# inside the folder but left the folder intact, then this will _not_ trigger
# an installation

if [ ! -d "/Library/Developer/CommandLineTools" ]; then

    echo "[setup] Begin install procedure for Xcode CLI..."

    # Create a temporary file for the header
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # Reset the Xcode CLI path
    if [[ $(macos_minor_version) -eq 14 ]]; then
        echo "[note] Needed to reset Xcode CLI path..."
        sudo xcode-select --reset 
    fi
    
    echo "[note] Retrieving correct Xcode CLI..."
    
    # Figure out the correct Xcode CLI for the given mac OS
    PROD=$(sudo softwareupdate -l |
          grep "\*.*Command Line" | 
          tail -n 1 | 
          awk -F"*" '{print $2}' | 
          sed -e 's/^ *//' | 
          sed 's/Label: //g' |
          tr -d '\n')
    # s/Label: //g was required for Catalina

    echo "[setup] Installing Xcode CLI via softwareupdate..."
    # Install Xcode CLI         
    sudo softwareupdate -i "$PROD" --verbose;
    
    echo "[clean] Removing temporary file created..."
    # Clean up the script
    rm -rf /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    echo "[done] Xcode CLI has been installed..."
else
    echo "[done] Xcode CLI is already installed..."
fi

################################################################

#1 Base URL (with trailing /)
#2 File name
download_file(){
    if [ -f "$2" ]; then
        echo "[note] $2 has already been downloaded..."
    else 
        echo "[status] Downloading file $2 ... Please be patient..."    
        # Download file into working directory
        curl -O $1$2
    fi
}

#1 File name
extract_file(){
    # Extract in working directory
    tar fvxz $1 -C /
}

################################################################

#1 Path to File
#2 md5 Hash to Check Against
check_md5_hash() {
    
    # Obtain file hash
    FILE_HASH=$(md5 $1 | awk '{print $4}')
    
    # MD5 (path/to/file.pkg) = c29700c4e7b2914073ef7e741eb105bc
    #  1 %         2        %3%      4 
     
    # Check against hash
    if [ "$FILE_HASH" = "$2" ]; then
       echo 0
    else 
       echo "[error] File does not match hash..."
       echo "[status] Hash 1: ${FILE_HASH} $2"
       echo "[status] Hash 2: $2"
       exit 1
    fi
}

# 1: Package to install 
install_pkg_root() {
    sudo installer -package $1 -target /
}

# 1: Package to install, e.g. /tmp/gfortran82.dmg
# 2: Volume specific-location, e.g. gfortran-8.2-Mojave/gfortran.pkg
install_gfortran_dmg() {
    sudo hdiutil attach $1 -mountpoint /Volumes/gfortran
    sudo installer -pkg "/Volumes/gfortran/$2" -target /
    sudo hdiutil detach /Volumes/gfortran
    rm -f $1
}

# No parameters are passed in
download_gfortran_dmg() {
    # URLS: 
    # https://github.com/fxcoudert/gfortran-for-macOS/releases/download/6.3/gfortran-6.3-Sierra.dmg
    # https://github.com/fxcoudert/gfortran-for-macOS/releases/download/8.2/gfortran-8.2-Mojave.dmg

    # Setup array of values as this is bash...
    os="bad"
    md5_hash="Unknown"
    gfortran_version="Unknown"

    # Detect operating system
    case $(macos_minor_version) in
    13)
      os="Sierra"
      gfortran_version="6.3"
      md5_hash="1849cea667bb714c5c04a8565a9fe231"
      ;;
    14|15)
      os="Mojave"
      gfortran_version="8.2"
      md5_hash="fbae8829503018b736a5a7013e3a6503"
      ;;
    *)
      echo "[error] Bad version supplied ..."
      exit 1
      ;;
    esac

    curl -fLo gfortran.dmg https://github.com/fxcoudert/gfortran-for-macOS/releases/download/$gfortran_version/gfortran-$gfortran_version-$os.dmg

    # Verify hash is correct. Otherwise, exit!
    check_md5_hash gfortran.dmg $md5_hash
}

################################################################

# Remove configuration for Makevars

# Local User Makevars file
R_MAKEVARS_LOCAL=~/.R/Makevars

echo "[init] Checking if file '~/.R/Makevars' exists"
if [ -f "${R_MAKEVARS_LOCAL}" ]; then    
    echo "[setup] '~/.R/Makevars' detected. Making a backup at ''~/.R/Makevars.bck' ..."
    cp ${R_MAKEVARS_LOCAL} ${R_MAKEVARS_LOCAL}.bck
    echo "[delete] 'Removing ~/.R/Makevars' ..."
    sudo rm ${R_MAKEVARS_LOCAL}
fi

echo "[done] Ensured '~/.R/Makevars' is no longer present ..."

##########################################

# Remove configuration for ~/.Renviron

# Establish the location for the R environment file
R_ENVIRON_LOCAL=~/.Renviron

echo "[init] Checking if file '~/.Renviron' exists"

if [ -f "${R_ENVIRON_LOCAL}" ]; then
    echo "[setup] '~/.Renviron' detected. Making a backup at ''~/.Renviron.bck'..."
    cp ${R_ENVIRON_LOCAL} ${R_ENVIRON_LOCAL}.bck
    echo "[delete] 'Removing ~/.Renviron' ..."
    sudo rm ${R_ENVIRON_LOCAL}
fi

echo "[done] Ensured '~/.Renviron' is no longer present ..."

##########################################


# gfortran binary
echo "[init] Downloading the gfortran6.1 package ..."

# Deploy only the 6.1 gfortran binary
GFORTRAN_HASH="201026216e8b373d9cd2efc0cc474bb8"

# Download software

# Provide download information for clang4 binary
LIBS_URL="https://cran.r-project.org/bin/macosx/tools/"
REQUESTED_FILE="gfortran-6.1.pkg"

# Download file into working directory
download_file $LIBS_URL $REQUESTED_FILE

echo "[verify] Verifying the hash of gfortran6.1 package ..."

# Check the hash matches the built-in hash
# exit if this is not the case
check_md5_hash $REQUESTED_FILE $GFORTRAN_HASH

echo "[setup] Installing the gfortran6.1 package ..."

# Install the package into root
install_pkg_root $REQUESTED_FILE

echo "[clean] Removing installer package ..."
# Delete the dmg file
rm -rf ${GFORTRAN_DMG}.dmg

echo "[done] Installed gfortran package ..."

